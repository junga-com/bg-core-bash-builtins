#!/usr/bin/env bash

# The goal of this configure script is...
#     1) install the bash headers and loadable builtin Makefile.inc. On debian based distros this is the bash-builtins pacakge.
#     2) locate the builtin Makefile.inc. On debian based distros this is at /usr/lib/bash/Makefile.inc
#     3) copy that Makefile.inc to this project folder as Makefile and modify it to replace the example.c builtin target with
#        the builtin taget(s) contained in this project.
#

# this is a space separated list of folders where a distro might place the loadable builtin makefile.
# it might alsways be /usr/lib/bash but just in case your distro does it differently, here is the place to add that info
pathsToTry="/usr/lib/bash"

function assertError() {
	echo "$*" >&2
	exit 2
}

# fills in var 'makefileLocation' if succesful
function searchForMakefile() {
	for pathToTry in /usr/lib/bash; do
		if [ -f "${pathToTry}"/Makefile.inc ]; then
			makefileLocation="${pathToTry}"/Makefile.inc
			break
		fi
	done
}

# To support a new distro, add a new elif block for that distro's package manager command to install the package contained in $1
function installDependency() {
	echo "installing dependency '$1'"
	if type -t apt-get &>/dev/null; then
		sudo apt-get install -y "$1"
	# elif type -t yum &>/dev/null; then
	# 	yum install -y "$1"
	else
		cat <<-EOS
			This distro is not yet supported by this configure script because it does not know how to install the dependency
			'$1' You can manually install that dependency and then re-run this command.
			EOS
	fi
}

# allow the caller to provide the path to the Makefile.inc
if [ "$1" ]; then
	makefileLocation="${1%/Makefile.inc}/Makefile.inc"
	[ -f "$makefileLocation" ] || {
		assertError "The Makefile.inc location provided as the first argument does not exist" >&2
	}
else
	searchForMakefile
fi

# if not found, try to install the bash builts/headers
[ -f "$makefileLocation" ] || {
	installDependency bash-builtins
	searchForMakefile
}

# if still not found, error out
[ -f "$makefileLocation" ] || {
	assertError <<-EOS
		Could not find the bash loadable builtin Makefile.inc on this host which is needed to build this project.
		You can manually install the bash-builtin/headers from a package from your distro or by downloading and builing the bash
		source and then re-run this command.

		If the builtins Makefile is not installed to /usr/lib/Makefile.inc, pass the full path to it as the first argument to
		this command.
		EOS
}

type -t awk &>/dev/null || installDependency awk
type -t awk &>/dev/null || assertError "This command needs 'awk' to modify the Makefile.inc from the bash project to become this project's makefile"

builtinList="$(ls -1 *.c 2>/dev/null)"

[ "$builtinList" ] || {
	assertError "No <builtin>.c files found in this project. It is assumed that <builtin>.c will be in the root project folder"
}

# copy and modify the Makefile.inc
echo "$builtinList" | awk '
	@include "bg_core.awk"
	BEGIN {
		printf("# WARNING: This file is overwritten each time you run ./configure so you probably dont want to edit it directly \n");
		while ((getline builtinSource <"/dev/stdin") >0) {
			builtinList[builtinSource]=1
		}
	}

	# assume that all: is still at the bottom and that it and everything below it is specific to the example.c builtin (that we will remove)
	$1=="all:" {stopCopying=NR}
	stopCopying=="" {origLines[NR]=$0}

	# catpure the build command for the building example: from example.o so that we can modify it to be general (an implicit rule)
	$1=="example:" {
		getline
		buildLine=$0
	}

	END {
		# if the Makefile.inc no longer has an explicit all: rule, then we can use it as a an include file.
		if (!stopCopying) {
			printf("\ninclude %s\n\n", FILENAME);

		# otherwise, copy the original Makefile.inc up to the point that it starts defining the targets
		} else {
			for (i=0; i<=stopCopying; i++)
				printf("%s\n",origLines[i]);
		}

		# now add an implicit pattern rule to build the final .so targets from .o files
		printf("%%.so : %%.o \n");
		printf("%s\n\n", gensub(/example.o/,"$<","g",buildLine));

		# now add an 'all:' target that builds all of the <builtin>.so from this builtin project
		printf("\nall: ");
		for (builtin in builtinList)
			printf("%s ", gensub(/[.]c$/,".so","g",builtin));
		printf("\n\n");

		# now add a clean: target
		printf("clean: \n\t@$(RM) *.o *.so");
	}
' "$makefileLocation" > ./Makefile
result=$?

if [ $result -ne 0 ]; then
	assertError <<-EOS
		the awk command that modifies '$makefileLocation' to become './Makefile' exited with the error code '$result'.
		You can try to copy and modify that Makefile yourself. Typically search and replace the 'example' builtin with the
		name of the built(s) from this project.
		EOS
else
	echo "Success"
fi
echo
